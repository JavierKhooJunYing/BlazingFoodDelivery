@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService 
 
<h3>Delicious Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else if (orderPlaced)
{
    <span>Thank You for your order! You can view your orders <a href="orders">here</a>.</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="containerr">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/menuitem/@product.MenuItemId">@product.Title</a></h5>
                    <input type="number" value="@product.Quantity" 
                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" 
                           class="form-control input-quantity" 
                           min="1" />
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.MenuItemId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">S$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count) : S$@cartProducts.Sum(product => @product.Price * product.Quantity)
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn btn-success float-right mt-1">Place Order</button>
}

@code {

    List<CartProductResponse> cartProducts = null;
    string message = "Loading Cart...";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int menuItemId)
    {
        await CartService.RemoveProductFromCart(menuItemId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your Cart Is Empty";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
