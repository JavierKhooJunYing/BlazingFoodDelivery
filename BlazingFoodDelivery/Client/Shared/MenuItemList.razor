@inject IMenuItemService MenuItemService 
@implements IDisposable

@if (MenuItemService.MenuItems == null || MenuItemService.MenuItems.Count == 0)
{
    <span>@MenuItemService.Message</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var menuItem in MenuItemService.MenuItems)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/menuitem/@menuItem.Id">
                        <img class="media-img" src="@menuItem.ImageUrl" alt="@menuItem.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/menuitem/@menuItem.Id">
                        <h4 class="mb-0">@menuItem.Title</h4>
                    </a>
                    <p>@menuItem.Description</p>
                    <h5 class="price">S$@menuItem.Price</h5>
                </div>
            </li>
        }
    </ul>
    for (var i = 1; i <= MenuItemService.PageCount; i++)
    {
        <a class="btn
                  @(i == MenuItemService.CurrentPage ? "btn-info" : "btn-outline-info")
                  page-selection"
                  href="/search/@MenuItemService.LastSearchText/@i">@i</a>
    }
}
 
@code {

    protected override void OnInitialized()
    {
        MenuItemService.MenuItemsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        MenuItemService.MenuItemsChanged -= StateHasChanged;
    }
}
